user navnetic;
worker_processes auto;
worker_cpu_affinity auto;

# 在events块中，定义了每个工作进程可以同时打开的最大连接数。这里设置为1024。
events {
    worker_connections 1024;
}

# 定义了HTTP服务器的配置
http {

    # 设置缓存路径和缓存区大小
    proxy_cache_path /tmp levels=1:2 keys_zone=my_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # 启用sendfile，这是一个高效的文件传输机制，允许操作系统直接将文件内容发送到网络，而不是先复制到应用程序的缓冲区。
    sendfile on;

    # 设置长连接的超时时间为3600秒
    keepalive_timeout 3600;

    # 定义了一个虚拟服务器的配置，用于处理特定的域名或IP地址的请求。
    server {

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # 监听环境变量PORT指定的端口。
        listen ${PORT};
        server_name _; # 使用通配符_来匹配所有域名
        server_tokens off; # 关闭响应头中的Nginx版本信息

        # gzip压缩，用于文本压缩加快传输
        gzip on;  # 开启gzip压缩
        gzip_comp_level 6; # 压缩级别，范围从1到9，级别越高压缩率越高，但CPU消耗也越高
        gzip_min_length 1100; # 压缩最小文件大小，单位为字节
        gzip_buffers 16 8k; # 设置缓存缓冲区数量和大小
        gzip_proxied any; # 对所有代理请求启用gzip压缩
        # 定义了哪些MIME类型的内容可以被gzip压缩
        gzip_types
            application/javascript
            application/json
            application/rss+xml
            application/x-javascript
            application/xml
            image/svg+xml
            text/css
            text/javascript
            text/js
            text/plain
            text/xml;

        # 对根目录（/）的请求处理规则
        location / {
            expires off;    # 禁用浏览器缓存
            add_header Cache-Control "no-cache, no-store, must-revalidate"; # 添加或覆盖响应头中的Cache-Control字段
            root /app/front;  # 设置文件根目录为/app/front。这意味着Nginx会从这个目录中查找并提供文件
            try_files $uri $uri/ /index.html =404;  # 尝试查找请求的URI，如果找到则提供该文件，否则提供index.html文件，如果仍然找不到则返回404错误
            index index.html; # 设置默认的索引文件为index.html
        }

        # 静态资源assets的请求处理规则
        location /assets {
            expires 30d;  # 缓存30天
            add_header Cache-Control "public";
            root /app/front;
        }

        # 静态资源static的请求处理规则
        location /static {
            expires 30d;
            add_header Cache-Control "public";
            root /app/config/data;
        }


        # API接口的请求处理规则
        location /api {
            proxy_pass http://backend_api; # 后端服务器地址和端口
            proxy_http_version 1.1; # 使用HTTP/1.1协议
            proxy_buffering off;  # 关闭代理缓存
            proxy_cache off;  # 关闭代理缓存
            proxy_redirect off; # 关闭代理重定向
            proxy_set_header Upgrade $http_upgrade; # 保留原始的HTTP升级请求头
            proxy_set_header X-Real-IP $remote_addr;  # 设置X-Real-IP请求头为客户端的IP地址
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 将客户端的IP地址添加到X-Forwarded-For请求头中
            proxy_set_header Host $http_host; # 将原始的Host请求头转发给后端服务器
        }
    }

    # 后端负载均衡，可以只有一个后端服务器
    upstream backend_api {
        # 后端API的地址和端口
        server 127.0.0.1:22680;
    }

}

